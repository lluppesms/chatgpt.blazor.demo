@page "/"
@inject IChatService chatService
@inject IJSRuntime JsInterop
@inject AppDataService AppData

<PageTitle>Lyle's Blazin' ChatGPT Example</PageTitle>

<link href="css/Chat.css" rel="stylesheet" />

<Row>
    <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is8.OnTablet.Is12.OnMobile">
        <div class="chatbot-container">
            <div id="chatbot" class="chatbot">
                <div id="conversation" class="conversation">
                    <div class="chatbot-message" @ref="msgDiv">
                        @foreach (var item in AppData.ChatMessageHistory)
                        {
                            <div class="@item.CSS">
                                <div class="user">
                                    @item.Username
                                    <span title="@item.QueryInfoPlusTime"><i class="fas fa-info-circle" style="color: white; margin-left: 5px;"></i></span>
                                </div>
                                <div class="msg">@item.Body</div>
                            </div>
                        }
                    </div>
                </div>
                <EditForm Model="@AppData.ChatCurrentMessage" OnSubmit="HandleFormSubmit">
                    @if (AppData.ChatShowQueryForm)
                    {
                        <div class="message-container">
                            <input id="inputText" type="text" @bind-value="AppData.ChatCurrentMessage.Request" @bind-value:event="oninput" style="width: 100%" class="input-lg" placeholder="enter your question" />
                            <button class="btn btn-info" type="submit" style="margin: 0 5px 0 5px;">Send</button>
                        </div>
                    }
                    @if (!AppData.ChatShowQueryForm)
                    {
                        <div class="d-flex">
                            <div class="spinner-border" style="margin: 15px 0 0 0;" role="status" aria-hidden="true"></div>
                            <strong style="margin: 20px 0 0 15px;">Searching the cloud for an answer...</strong>
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </Column>
    <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is4.OnTablet.Is12.OnMobile">
        <div id="settings" class="chatbot-container">
            <Heading Style="margin-top: 25px;">
                Settings:
            </Heading>
            <Paragraph Style="margin-top: 25px;">
                <b>Temperature:</b> @AppData.ChatTemperature <span title="Controls randomness. Lowering the temperature means that the model will produce more repetitive and deterministic responses. Increasing the temperature will result in more unexpected or creative responses. Try adjusting temperature or Top P but not both."><i class="fas fa-info-circle" style="color: lightgray; margin-left: 5px;"></i></span>
            </Paragraph>
            <Field>
                <Slider TValue="int" @bind-Value="@AppData.ChatTemperature" Min="10" Max="100" Step="5" />
            </Field>
            <Paragraph>
                <b>Tokens:</b> @AppData.ChatTokenValue <span title="Set a limit on the number of tokens per model response. The API supports a maximum of 4000 tokens shared between the prompt (including system message, examples, message history, and user query) and the model's response. One token is roughly 4 characters for typical English text."><i class="fas fa-info-circle" style="color: lightgray; margin-left: 5px;"></i></span>
            </Paragraph>
            <Field>
                <Slider TValue="int" @bind-Value="@AppData.ChatTokenValue" Min="25" Max="4000" Step="25" />
            </Field>
            <Paragraph Style="font-size: 0.7em; margin-left: 15px;">
                Approximate Query Cost: $ @AppData.ChatTokenCost (based on ~$0.002 / 1K tokens)
            </Paragraph>
            <Paragraph>
                <b>Model:</b> <Span Style="color: gray; font-size: 0.7em">(<a href="https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/models" target="_blank">learn more</a>)</Span>
            </Paragraph>
            <Field>
                <Select TValue="string" @bind-SelectedValue="@AppData.ChatSelectedModel">
                    <SelectItem Value="@Constants.LanguageModelType.textDavinci003">@Constants.LanguageModelType.textDavinci003</SelectItem>
                    @*<SelectItem Value="@Constants.LanguageModelType.gpt35turbo">@Constants.LanguageModelType.gpt35turbo</SelectItem>*@
                </Select>
            </Field>
            <Button Clicked="ResetChat" Class="btn btnInfo">Reset Chat History</Button>
        </div>
    </Column>
</Row>

@code {
    private ElementReference msgDiv;

    protected override async Task OnInitializedAsync()
    {
        // --> this always seems to fire twice for Server apps, so move logic to OnAfterRender
        await base.OnInitializedAsync().ConfigureAwait(true);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (AppData.ChatMessageHistory.Count == 0)
            {
                AppData.ChatMessageHistory.Add(new MessageBubble("GPT", "Hello!", false));
            }
            await HideQueryForm(false);
        }
    }

    private async void HandleFormSubmit()
    {
        await HideQueryForm(true);
        try
        {
            // get rid of extra return characters, which seem to break the model...?
            AppData.ChatCurrentMessage.LastRequest = AppData.ChatCurrentMessage.Request.Replace("\n", " "); ;
            // reset form for next time
            AppData.ChatCurrentMessage.Request = string.Empty;
            // post the current message on the screen
            AppData.ChatMessageHistory.Add(new MessageBubble("Me", AppData.ChatCurrentMessage.LastRequest, true));
            // go get the API response
            AppData.ChatCurrentMessage.Response = await chatService.GetResponse(
              new OpenAIQuery(AppData.ChatSelectedModel, AppData.ChatTemperatureDec, AppData.ChatTokenValue, AppData.ChatCurrentMessage.LastRequest)
            );
            // post the repsonse to the screen
            AppData.ChatMessageHistory.Add(new MessageBubble("GPT", AppData.ChatCurrentMessage.Response.Choices[0].Text, false, AppData.ChatCurrentMessage.Response.QueryInfo, AppData.ChatCurrentMessage.LastRequest, AppData.ChatTemperatureDec, AppData.ChatTokenValue));
        }
        catch (Exception ex)
        {
            AppData.ChatMessageHistory.Add(new MessageBubble("Error", ex.Message, false));
        }
        await HideQueryForm(false);
    }

    private async Task HideQueryForm(bool hideForm)
    {
        AppData.ChatShowQueryForm = !hideForm;
        StateHasChanged();
        if (AppData.ChatShowQueryForm)
        {
            await JsInterop.InvokeVoidAsync("focusOnInputField", "inputText");
            await JsInterop.InvokeVoidAsync("scrollToBottomOfDiv", "conversation");
            StateHasChanged();
        }
    }
    private void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            HandleFormSubmit();
        }
    }
    private async void ResetChat()
    {
        AppData.ChatMessageHistory = new();
        AppData.ChatCurrentMessage = new();
        AppData.ChatMessageHistory.Add(new MessageBubble("GPT", "Hello!", false));
        await JsInterop.InvokeVoidAsync("focusOnInputField", "inputText");
    }
}
