@page "/SimpleChat"
<PageTitle>Simple Chat Example</PageTitle>

<link href="css/Chat.css" rel="stylesheet" />

<Row Class="almostFullWidth">
    <Column id="colControls" ColumnSize="ColumnSize.Is12.OnDesktop.Is12.OnTablet.Is12.OnMobile" TextAlignment="TextAlignment.End">
        <Button Clicked="ResetChat" Class="BorderlessGrayButtonMiddle"><i class="fa fa-trash" /> Clear Chat</Button>
        <Button Clicked="ShowSettings" Class="BorderlessGrayButtonRight"><i class="fa fa-cog" /> Developer Settings</Button>
    </Column>
</Row>
<Row Class="chatbot-row almostFullWidth">
    <Column id="colConversation" ColumnSize="@(showSettings ? ColumnSize.Is8.OnDesktop.Is8.OnTablet.Is12.OnMobile : ColumnSize.Is12.OnDesktop.Is12.OnTablet.Is12.OnMobile)">
        <Div Class="chatbot-container">
            <Div id="conversation" Class="conversation">
                <Div Class="chatbot-message">
                    @foreach (var item in AppData.ChatMessageHistory)
                    {
                        <MessageBubbleComponent message="@item" />
                    }
                </Div>
            </Div>
            <LoadingIndicator @ref="loadingIndicator">
                <EditForm Model="@AppData.ChatCurrentMessage" OnSubmit="SubmitForm">
                    <Div Class="message-container">
                        <input id="inputText" type="text" @bind-value="AppData.ChatCurrentMessage.Request" @bind-value:event="oninput" class="input-lg fullWidth" placeholder="enter your question" />
                        <button class="btn btn-info submitButton" type="submit" >Send</button>
                    </Div>
                </EditForm>
            </LoadingIndicator>
        </Div>
    </Column>
    <Column id="colSettings" ColumnSize="ColumnSize.Is4.OnDesktop.Is4.OnTablet.Is12.OnMobile" Display="@(showSettings ? Display.Block : Display.None)">
        <Div id="settings" Class="chatbot-container">
            <Heading>
                Settings:
            </Heading>
            <Div id="editTemperature" Class="divClear smallTopMargin">
                <Div Class="divFloatLeft">
                    <b>Temperature:</b> @AppData.ChatTemperature <span title="Controls randomness. Lowering the temperature means that the model will produce more repetitive and deterministic responses. Increasing the temperature will result in more unexpected or creative responses. Try adjusting temperature or Top P but not both."><Icon Name="IconName.InfoCircle" Class="LightGrayIcon" /></span>
                </Div>
                <Div Class="divFloatLeft smallLeftMargin">
                    <Slider TValue="int" @bind-Value="@AppData.ChatTemperature" Min="0" Max="100" Step="5" />
                </Div>
            </Div>
            <Div id="editTokens" Class="divClear smallTopMargin">
                <Div Class="divFloatLeft">
                    <b>Tokens:</b> @AppData.ChatTokenValue <span title="Set a limit on the number of tokens per model response. The API supports a maximum of 4000 tokens shared between the prompt (including system message, examples, message history, and user query) and the model's response. One token is roughly 4 characters for typical English text."><Icon Name="IconName.InfoCircle" Class="LightGrayIcon" /></span>
                </Div>
                <Div Class="divFloatLeft smallLeftMargin">
                    <Slider TValue="int" @bind-Value="@AppData.ChatTokenValue" Min="25" Max="4000" Step="25" />
                </Div>
                <Div Class="divClear mediumTopMargin mediumLeftMargin smallGrayText">
                    Approximate Query Cost: $ @AppData.ChatTokenCost (based on ~$0.002 / 1K tokens)
                </Div>
            </Div>
            <Div id="editModel" Class="divClear smallTopMargin">
                <Div Class="divFloatLeft">
                    <b>Model:</b> <Span Class="smallGrayText">(<a href="https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/models" target="_blank">learn more</a>)</Span>
                </Div>
                <Div Class="divFloatLeft">
                    <Select TValue="string" @bind-SelectedValue="@AppData.ChatSelectedModel" Class="selectBoxTight">
                        @* Chat completion API does not work with textDavinci003...  *@
                        @*<SelectItem Value="@Data.Constants.LanguageModelType.textDavinci003">@Data.Constants.LanguageModelType.textDavinci003</SelectItem>*@
                        <SelectItem Value="@Data.Constants.LanguageModelType.gpt35turbo">@Data.Constants.LanguageModelType.gpt35turbo</SelectItem>
                    </Select>
                </Div>
            </Div>
            <Div id="editVoice" Class="divClear smallTopMargin">
                <Div Class="divFloatLeft">
                    <b>Voice:</b> <span title="Choose the voice that you want the assistant to use when creating a reply."><Icon Name="IconName.InfoCircle" Class="LightGrayIcon" /></span>
                </Div>
                <Div Class="divFloatLeft">
                    @*<PersonalityComponent @bind-SelectedPersonality="AppData.Personality" @bind-SelectedPersonality:event="SelectedPersonalityChanged" @ref="personalityComponent" />*@
                    <Select TValue="string" @bind-SelectedValue="@AppData.Personality" Class="selectBoxTight">
                        @foreach (var item in ChatPersonality.Personalities.OrderBy(x => x.SortOrderNbr).ThenBy(x => x.Name))
                        {
                            <SelectItem Value="@item.Name">@item.Description</SelectItem>
                        }
                    </Select>
                </Div>
            </Div>
            <Div id="editAlert" Class="alert alert-info divClear smallTopMargin">
                This page uses a simple API call to talk to OpenAI Service in Azure.
            </Div>
        </Div>
    </Column>
</Row>
<SnackbarStack @ref="snackbarstack" Location="SnackbarStackLocation.End" />
